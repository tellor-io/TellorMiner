on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: New Release from a tag
jobs:
  release:
    name: Build, upload and create a release
    runs-on: ubuntu-latest
    steps:
      - name : install dependancies
        run: sudo apt-get install ocl-icd-opencl-dev
      - uses: actions/checkout@v2
        with:
            fetch-depth: 0 # Fetch all tags as well.
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16.x
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Source code zip
        run: |
          zip -r source.zip . -x '*.git*'

      - name: Build
        run: make build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
          body: "[changelog.md](../master/docs/changelog.md) contains all release changes"

      - name: Upload Source
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: source.zip
          asset_name: source.zip
          asset_content_type: application/zip

      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: telliot # TODO instead of hard coding the name try to grab it from the build output. tried with `go build -a -v |   basename -a` but didn't work.
          asset_name: telliot
          asset_content_type: application/octet-stream
